(in-package :clap-entities)

(defclass ap-object ()
  ((attachment :accessor attachment :initarg :attachment)
   (attributed-to :accessor attributed-to :initarg :attributed-to)
   (audience :accessor audience :initarg :audience)
   (atcontext :accessor atcontext :initarg :atcontext
              :initform "https://www.w3e.org/ns/activitystreams")
   (content :accessor content :initarg :content)
   (context :accessor context :initarg :context)
   (name :accessor name :initarg :name)
   (end-time :accessor end-time :initarg :end-time)
   (generator :accessor generator :initarg :generator)
   (icon :accessor icon :initarg :icon)
   (image :accessor image :initarg :image)
   (in-reply-to :accessor in-reply-to :initarg :in-reply-to)
   (location :accessor location :initarg :location)
   (preview :accessor preview :initarg :preview)
   (published :accessor published :initarg :published)
   (replies :accessor replies :initarg :replies)
   (start-time :accessor start-time :initarg :start-time)
   (summary :accessor summary :initarg :summary)
   (tag :accessor tag :initarg :tag)
   (updated :accessor updated :initarg :updated)
   (url :accessor url :initarg :url)
   (to :accessor to :initarg :to)
   (bto :accessor bto :initarg :bto)
   (cc :accessor cc :initarg :cc)
   (bcc :accessor bcc :initarg :bcc)
   (media-type :accessor media-type :initarg :media-type)
   (duration :accessor duration :initarg :duration)
   (object-type :reader object-type :initform "Object")))

(defclass link ()
  ((href :accessor href :initarg :href)
   (rel :initarg :rel :accessor rel)
   (media-type :accessor media-type :initarg :media-type)
   (name :accessor name :initarg :name)
   (hreflang :accessor hreflang :initarg :hreflang :initform "en")
   (height :accessor height :initarg :height)
   (width :accessor width :initarg :width)
   (preview :accessor preview :initarg :preview)
   (context :accessor context :initarg :context)
   (atcontext :accessor atcontext :initarg :atcontext
              :initform "https://www.w3e.org/ns/activitystreams")
   (object-type :reader object-type :initform "Link")))

(defclass collection (ap-object)
  ((total-items :accessor total-items :initarg :total-items)
   (current :accessor current :initarg :current)
   (first-item :accessor first-item :initarg :first-item)
   (last-item :accessor last-item :initarg :last-item)
   (items :accessor items :initarg :items)
   (object-type :reader object-type :initform "Collection")))

(defclass ordered-collection (collection) ())

(defclass collection-page (collection)
  ((part-of :accessor part-of :initarg :part-of)
   (next-page :accessor next-page :initarg :next-page)
   (prev-page :accessor prev-page :initarg :prev-page)
   (object-type :reader object-type :initform "CollectionPage")))

(defclass ordered-collection-page (ordered-collection collection-page)
  ((object-type :reader object-type :initform "OrderedCollectionPage")))

(defclass activity (ap-object)
  ((actor :accessor actor :initarg :actor)
   (object :accessor object :initarg :object)
   (target :accessor target :initarg :target)
   (result :accessor result :initarg :result)
   (origin :accessor origin :initarg :origi)
   (instrument :accessor instrument :initarg :instrument)
   (object-type :reader object-type :initform "Activity")))

;; Intransitive activity should be a subtype of activity, but
;; we couldn't remove the object property
(defclass intransitive-activity (ap-object)
    ((actor :accessor actor :initarg :actor)
     (target :accessor target :initarg :target)
     (result :accessor result :initarg :result)
     (origin :accessor origin :initarg :origi)
     (instrument :accessor instrument :initarg :instrument)
     (object-type :accessor object-type :initform "IntransitiveActivity")))

(defmacro if-slot-bound (object slot &rest body)
  `(if (slot-boundp ,object ,slot) (progn ,@body)))

(defun clap-encode-element (object slot key)
  (if-slot-bound object slot (yason:encode-object-element key (slot-value object slot))))

(defmethod yason:encode-slots progn ((object ap-object))
  (yason:encode-object-element "@context" (atcontext object))
  (yason:encode-object-element "type" (object-type object))
  (clap-encode-element object 'attachment "attachment")
  (clap-encode-element object 'attributed-to "attributedTo")
  (clap-encode-element object 'audience "audience")
  (clap-encode-element object 'content "content")
  (clap-encode-element object 'context "context")
  (clap-encode-element object 'name "name")
  (clap-encode-element object 'end-time "endTime")
  (clap-encode-element object 'generator "generator")
  (clap-encode-element object 'icon "icon")
  (clap-encode-element object 'image "image")
  (clap-encode-element object 'in-reply-to "inReplyTo")
  (clap-encode-element object 'location "location")
  (clap-encode-element object 'preview "preview")
  (clap-encode-element object 'published "published")
  (clap-encode-element object 'replies "replies")
  (clap-encode-element object 'start-time "startTime")
  (clap-encode-element object 'summary "summary")
  (clap-encode-element object 'tag "tag")
  (clap-encode-element object 'updated "updated")
  (clap-encode-element object 'url "url")
  (clap-encode-element object 'to "to")
  (clap-encode-element object 'bto "bto")
  (clap-encode-element object 'cc "cc")
  (clap-encode-element object 'bcc "bcc")
  (clap-encode-element object 'media-type "mediaType")
  (clap-encode-element object 'duration "duration"))


(defgeneric as-json (object &optional stream)
  (:documentation "Represent the object as a JSON object."))

(defmethod as-json ((object ap-object) &optional (stream *standard-output*))
  (yason:with-output (stream :indent t)
    (yason:encode-object object)))

(defmethod as-json ((link link) &optional (stream *standard-output*))
  (yason:with-output (stream :indent t)
    (yason:encode-object link)))
